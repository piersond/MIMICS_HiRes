saveRDS(MIM_Map_data_full, "MIM_MAP_data_full.rds")
# copy raster construct and meta from estGPP, refill with MIMSOC values
estSOC <- setValues(estGPP, MIM_Map_data_full$MIMSOC)
#show map
plot(estSOC)
#set working drive
setwd("C:/github/MIMICS_HiRes/Mapping")
# Set path to raster files
raster_path <- "C:/Users/Derek/Google Drive/RCrk/GIS/MIMICS_rasters/"
# Load raster data
estGPP <- raster(paste0(raster_path,"MSAVI_estGPP.tif"))
estTSOI <- raster(paste0(raster_path,"tsoi_est2.tif"))
estCLAY <- raster(paste0(raster_path,"RCrk_estClay.tif"))
estLIGN <- raster(paste0(raster_path,"RCrk_estLigN.tif"))
raster_n <- ncell(estGPP)
raster_frc <- data.frame(Site=seq(1,raster_n),
pGPP=as.numeric(getValues(estGPP)),
TSOI=as.numeric(getValues(estTSOI)),
CLAY=as.numeric(getValues(estCLAY)),
LIG_N=as.numeric(getValues(estLIGN)))
# Remove rows if NA exists in data columns
raster_frc_nona <- na.omit(raster_frc)
#Write output
saveRDS(raster_frc_nona, "MIMICS_map_forcing_data.rds")
RC_map_forcing_data <- readRDS("C:/github/MIMICS_HiRes/Mapping/RC_map_forcing_data.rds")
View(RC_map_forcing_data)
View(raster_frc_nona)
View(RC_map_forcing_data)
raster_frc_nona$index <- seq(1,nrow(raster_frc_nona),1)
#Write output
saveRDS(raster_frc_nona, "MIMICS_map_forcing_data.rds")
View(RC_map_forcing_data)
raster_frc_nona == RC_map_forcing_data
# Bring in MIMICS ftn
source("../MIMICS_ftns/MIMICS_base_ftn.R")
setwd("C:/github/MIMICS_HiRes/Mapping")
# Bring in MIMICS ftn
source("../MIMICS_ftns/MIMICS_base_ftn.R")
setwd("C:/github/MIMICS_HiRes")
# Bring in MIMICS ftn
source("MIMICS_ftns/MIMICS_base_ftn.R")
frc_data <- readRDS("Mapping/MIMICS_map_forcing_data.rds")
View(frc_data)
library(tidyverse)
library(furrr)
library(purrr)
setwd("C:/github/MIMICS_HiRes")
# Bring in MIMICS ftn
source("MIMICS_ftns/MIMICS_base_ftn.R")
# Set forcing data
frc_data <- readRDS("Mapping/MIMICS_map_forcing_data.rds")
######################################
# Run a scenario, or comment out
######################################
#frc_data$TSOI <- frc_data$TSOI+1
#frc_data$pGPP <- frc_data$pGPP*1.05
#DEBUG: Run a small piece of the map for testing purposes
frc_data <- frc_data[1:3000,]
########################################
# Apply rate curve brute force multipliers
#######################################
### Use option 1 or 2, not both (comment out code for option not used)
##########################################
# OPTION 1
### Manually set parameters for MIMICS run
pset <- data.frame(
id = 38489, #set an ID# for tracking
Vslope_x = 2.891815932,
Vint_x = 1.767005898,
Kslope_x = 1.003510074,
Kint_x = 2.3084668,
CUE_x = 0.978538555,
Tau_x = 1.025889712,
desorb_x = 1.891280193,
fPHYS_x = 2.74531248
)
###########################################
###########################################
# OPTION 2
### If making many maps from sets of MIMICS parameters
## Load a set of parameters for MIMICS
# param_sets <- readRDS("MIMICS_MC_parms_for_maps.rds")
# param_sets$pID <- seq(1,nrow(param_sets),1)
## Manually select parameter set
# pest_num <- 1  #<-- enter number for desired parameter set (row #)
# pset <- param_sets[pset_num,]
###########################################
#####################################
### Setting of chosen parameters
#####################################
# Set parameter defaults
Vslope_d  = rep(0.063, 6)
Vint_d    = rep(5.47, 6)
Kslope_d  = rep(c(0.025, 0.035, 0.025),2)
Kint_d    = rep(3.19, 6)
CUE_d     = c(0.55, 0.25, 0.75, 0.35)
Tau_MULT_d = 1
Tau_MULT_d = 1
desorb_MULT_d = 1
fPHYS_MULT_d = 1
# Set parameters
Vslope = Vslope_d * pset$Vslope_x
Vint = Vint_d * pset$Vint_x
Kslope = Kslope_d * pset$Kslope_x
Kint = Kint_d * pset$Kint_x
CUE = CUE_d * pset$CUE_x
Tau_MULT = pset$Tau_x
desorb_MULT = pset$desorb_x
fPHYS_MULT = pset$fPHYS_x
###################################################
# Start up MIMICS run using parallel processing
###################################################
# Set number of cores to use
#no_cores <- availableCores() - 2
no_cores <- 5
plan(multicore, gc = TRUE, workers = no_cores)
# Run MIMICS! (track time required)
start_time <- Sys.time()
MIM_Map_data <- frc_data %>% split(1:nrow(frc_data)) %>% future_map(MIMICS1, .progress=TRUE) %>% bind_rows()
Sys.time() - start_time
# Release CPU cores
plan(sequential)
nbrOfWorkers()
# Clean up memory
gc()
#################################################
# Save map output
#################################################
#Write raw map output
saveRDS(MIM_Map_data, "debug_MIMICS_RC_MAP_data.rds")
# join to raster frac data frame
MIM_Map_data_full <- merge(raster_frc, MIMdata, by.x = "Site",
by.y = "Site", all.x = TRUE, all.y = FALSE)
#save full map dataset
saveRDS(MIM_Map_data_full, "MIM_MAP_data_full.rds")
#################################################
# Build rasters from map data
#################################################
# copy raster construct and meta from estGPP, refill with MIMSOC values
# estSOC <- setValues(estGPP, MIM_Map_data_full$MIMSOC)
# estMIMLIT <- setValues(estGPP, MIM_Map_data_full$MIMLIT)
# estMIMMIC <- setValues(estGPP, MIM_Map_data_full$MIMMIC)
# estLITm <- setValues(estGPP, MIM_Map_data_full$LITm)
# estLITs <- setValues(estGPP, MIM_Map_data_full$LITs)
# estMICr <- setValues(estGPP, MIM_Map_data_full$MICr)
# estMICk <- setValues(estGPP, MIM_Map_data_full$MICK)
# estMIMCO <- setValues(estGPP, MIM_Map_data_full$MIM_CO)
# estSOMa <- setValues(estGPP, MIM_Map_data_full$SOMa)
# estSOMc <- setValues(estGPP, MIM_Map_data_full$SOMc)
# estSOMp <- setValues(estGPP, MIM_Map_data_full$SOMp)
#show map
# plot(estSOC)
# plot(estMIMLIT)
# plot(estMIMMIC)
# plot(estLITm)
# plot(estLITs)
# plot(estMICr)
# plot(estMICk)
# plot(estMIMCO)
# plot(estSOMa)
# plot(estSOMc)
# plot(estSOMp)
#MIMICS input maps
# plot(estGPP)
# plot(estTSOI)
# plot(estCLAY)
# plot(estLIGN)
#save raster
# writeRaster(estSOC,'C:/local_temp/MIMICS_raster_dump/estSOC_040621.tif',options=c('TFW=YES'))
# writeRaster(estMIMLIT,'C:/local_temp/MIMICS_raster_dump/estMIMLIT_040621.tif',options=c('TFW=YES'))
# writeRaster(estMIMMIC,'C:/local_temp/MIMICS_raster_dump/estMIMMIC_040621.tif',options=c('TFW=YES'))
# writeRaster(estLITm,'C:/local_temp/MIMICS_raster_dump/estLITm_040621.tif',options=c('TFW=YES'))
# writeRaster(estLITs,'C:/local_temp/MIMICS_raster_dump/estLITs_040621.tif',options=c('TFW=YES'))
# writeRaster(estMICr,'C:/local_temp/MIMICS_raster_dump/estMICr_040621.tif',options=c('TFW=YES'))
# writeRaster(estMICk,'C:/local_temp/MIMICS_raster_dump/estMICK_040621.tif',options=c('TFW=YES'))
# writeRaster(estMIMCO,'C:/local_temp/MIMICS_raster_dump/estMIMCO_040621.tif',options=c('TFW=YES'))
# writeRaster(estSOMa,'C:/local_temp/MIMICS_raster_dump/estSOMa_040621.tif',options=c('TFW=YES'))
# writeRaster(estSOMc,'C:/local_temp/MIMICS_raster_dump/estSOMc_040621.tif',options=c('TFW=YES'))
# writeRaster(estSOMp,'C:/local_temp/MIMICS_raster_dump/estSOMp_040621.tif',options=c('TFW=YES'))
View(frc_data)
######################################################
# Create MIMICS forcing dataset from raster layers
######################################################
library(raster)
library(rgdal)
library(tidyverse)
#set working drive
setwd("C:/github/MIMICS_HiRes/Mapping")
# Set path to raster files
raster_path <- "C:/Users/Derek/Google Drive/RCrk/GIS/MIMICS_rasters/"
# Load raster data
estGPP <- raster(paste0(raster_path,"MSAVI_estGPP.tif"))
estTSOI <- raster(paste0(raster_path,"tsoi_est2.tif"))
estCLAY <- raster(paste0(raster_path,"RCrk_estClay.tif"))
estLIGN <- raster(paste0(raster_path,"RCrk_estLigN.tif"))
#smaller test areas
# raster_path <- "C:/Users/Derek/Google Drive/RCrk/GIS/MIMICS_rasters/specs/"
# estGPP <- raster(paste0(raster_path,"MSAVI_estGPP_spc.tif"))
# estTSOI <- raster(paste0(raster_path,"tsoi_est2_spc.tif"))
# estCLAY <- raster(paste0(raster_path,"RCrk_estClay_spc.tif"))
# estLIGN <- raster(paste0(raster_path,"RCrk_estLigN_spc.tif"))
raster_n <- ncell(estGPP)
raster_frc <- data.frame(Site=seq(1,raster_n),
pGPP=as.numeric(getValues(estGPP)),
TSOI=as.numeric(getValues(estTSOI)),
CLAY=as.numeric(getValues(estCLAY)),
lig_N=as.numeric(getValues(estLIGN)))
# Remove rows if NA exists in data columns
raster_frc_nona <- na.omit(raster_frc)
raster_frc_nona$index <- seq(1,nrow(raster_frc_nona),1)
#Write output
saveRDS(raster_frc_nona, "MIMICS_map_forcing_data.rds")
library(tidyverse)
library(furrr)
library(purrr)
setwd("C:/github/MIMICS_HiRes")
# Bring in MIMICS ftn
source("MIMICS_ftns/MIMICS_base_ftn.R")
# Set forcing data
frc_data <- readRDS("Mapping/MIMICS_map_forcing_data.rds")
######################################
# Run a scenario, or comment out
######################################
#frc_data$TSOI <- frc_data$TSOI+1
#frc_data$pGPP <- frc_data$pGPP*1.05
#DEBUG: Run a small piece of the map for testing purposes
frc_data <- frc_data[1:3000,]
########################################
# Apply rate curve brute force multipliers
#######################################
### Use option 1 or 2, not both (comment out code for option not used)
##########################################
# OPTION 1
### Manually set parameters for MIMICS run
pset <- data.frame(
id = 38489, #set an ID# for tracking
Vslope_x = 2.891815932,
Vint_x = 1.767005898,
Kslope_x = 1.003510074,
Kint_x = 2.3084668,
CUE_x = 0.978538555,
Tau_x = 1.025889712,
desorb_x = 1.891280193,
fPHYS_x = 2.74531248
)
###########################################
###########################################
# OPTION 2
### If making many maps from sets of MIMICS parameters
## Load a set of parameters for MIMICS
# param_sets <- readRDS("MIMICS_MC_parms_for_maps.rds")
# param_sets$pID <- seq(1,nrow(param_sets),1)
## Manually select parameter set
# pest_num <- 1  #<-- enter number for desired parameter set (row #)
# pset <- param_sets[pset_num,]
###########################################
#####################################
### Setting of chosen parameters
#####################################
# Set parameter defaults
Vslope_d  = rep(0.063, 6)
Vint_d    = rep(5.47, 6)
Kslope_d  = rep(c(0.025, 0.035, 0.025),2)
Kint_d    = rep(3.19, 6)
CUE_d     = c(0.55, 0.25, 0.75, 0.35)
Tau_MULT_d = 1
Tau_MULT_d = 1
desorb_MULT_d = 1
fPHYS_MULT_d = 1
# Set parameters
Vslope = Vslope_d * pset$Vslope_x
Vint = Vint_d * pset$Vint_x
Kslope = Kslope_d * pset$Kslope_x
Kint = Kint_d * pset$Kint_x
CUE = CUE_d * pset$CUE_x
Tau_MULT = pset$Tau_x
desorb_MULT = pset$desorb_x
fPHYS_MULT = pset$fPHYS_x
###################################################
# Start up MIMICS run using parallel processing
###################################################
# Set number of cores to use
#no_cores <- availableCores() - 2
no_cores <- 5
plan(multicore, gc = TRUE, workers = no_cores)
# Run MIMICS! (track time required)
start_time <- Sys.time()
MIM_Map_data <- frc_data %>% split(1:nrow(frc_data)) %>% future_map(MIMICS1, .progress=TRUE) %>% bind_rows()
Sys.time() - start_time
# Release CPU cores
plan(sequential)
nbrOfWorkers()
# Clean up memory
gc()
#################################################
# Save map output
#################################################
#Write raw map output
saveRDS(MIM_Map_data, "debug_MIMICS_RC_MAP_data.rds")
# join to raster frac data frame
MIM_Map_data_full <- merge(raster_frc, MIMdata, by.x = "Site",
by.y = "Site", all.x = TRUE, all.y = FALSE)
#save full map dataset
saveRDS(MIM_Map_data_full, "MIM_MAP_data_full.rds")
#################################################
# Build rasters from map data
#################################################
# copy raster construct and meta from estGPP, refill with MIMSOC values
# estSOC <- setValues(estGPP, MIM_Map_data_full$MIMSOC)
# estMIMLIT <- setValues(estGPP, MIM_Map_data_full$MIMLIT)
# estMIMMIC <- setValues(estGPP, MIM_Map_data_full$MIMMIC)
# estLITm <- setValues(estGPP, MIM_Map_data_full$LITm)
# estLITs <- setValues(estGPP, MIM_Map_data_full$LITs)
# estMICr <- setValues(estGPP, MIM_Map_data_full$MICr)
# estMICk <- setValues(estGPP, MIM_Map_data_full$MICK)
# estMIMCO <- setValues(estGPP, MIM_Map_data_full$MIM_CO)
# estSOMa <- setValues(estGPP, MIM_Map_data_full$SOMa)
# estSOMc <- setValues(estGPP, MIM_Map_data_full$SOMc)
# estSOMp <- setValues(estGPP, MIM_Map_data_full$SOMp)
#show map
# plot(estSOC)
# plot(estMIMLIT)
# plot(estMIMMIC)
# plot(estLITm)
# plot(estLITs)
# plot(estMICr)
# plot(estMICk)
# plot(estMIMCO)
# plot(estSOMa)
# plot(estSOMc)
# plot(estSOMp)
#MIMICS input maps
# plot(estGPP)
# plot(estTSOI)
# plot(estCLAY)
# plot(estLIGN)
#save raster
# writeRaster(estSOC,'C:/local_temp/MIMICS_raster_dump/estSOC_040621.tif',options=c('TFW=YES'))
# writeRaster(estMIMLIT,'C:/local_temp/MIMICS_raster_dump/estMIMLIT_040621.tif',options=c('TFW=YES'))
# writeRaster(estMIMMIC,'C:/local_temp/MIMICS_raster_dump/estMIMMIC_040621.tif',options=c('TFW=YES'))
# writeRaster(estLITm,'C:/local_temp/MIMICS_raster_dump/estLITm_040621.tif',options=c('TFW=YES'))
# writeRaster(estLITs,'C:/local_temp/MIMICS_raster_dump/estLITs_040621.tif',options=c('TFW=YES'))
# writeRaster(estMICr,'C:/local_temp/MIMICS_raster_dump/estMICr_040621.tif',options=c('TFW=YES'))
# writeRaster(estMICk,'C:/local_temp/MIMICS_raster_dump/estMICK_040621.tif',options=c('TFW=YES'))
# writeRaster(estMIMCO,'C:/local_temp/MIMICS_raster_dump/estMIMCO_040621.tif',options=c('TFW=YES'))
# writeRaster(estSOMa,'C:/local_temp/MIMICS_raster_dump/estSOMa_040621.tif',options=c('TFW=YES'))
# writeRaster(estSOMc,'C:/local_temp/MIMICS_raster_dump/estSOMc_040621.tif',options=c('TFW=YES'))
# writeRaster(estSOMp,'C:/local_temp/MIMICS_raster_dump/estSOMp_040621.tif',options=c('TFW=YES'))
# copy raster construct and meta from estGPP, refill with MIMSOC values
estSOC <- setValues(estGPP, MIM_Map_data_full$MIMSOC)
library(tidyverse)
library(furrr)
library(purrr)
setwd("C:/github/MIMICS_HiRes")
# Bring in MIMICS ftn
source("MIMICS_ftns/MIMICS_base_ftn.R")
# Set forcing data
frc_data <- readRDS("Mapping/MIMICS_map_forcing_data.rds")
######################################
# Run a scenario, or comment out
######################################
#frc_data$TSOI <- frc_data$TSOI+1
#frc_data$pGPP <- frc_data$pGPP*1.05
#DEBUG: Run a small piece of the map for testing purposes
frc_data <- frc_data[1:3000,]
########################################
# Apply rate curve brute force multipliers
#######################################
### Use option 1 or 2, not both (comment out code for option not used)
##########################################
# OPTION 1
### Manually set parameters for MIMICS run
pset <- data.frame(
id = 38489, #set an ID# for tracking
Vslope_x = 2.891815932,
Vint_x = 1.767005898,
Kslope_x = 1.003510074,
Kint_x = 2.3084668,
CUE_x = 0.978538555,
Tau_x = 1.025889712,
desorb_x = 1.891280193,
fPHYS_x = 2.74531248
)
###########################################
###########################################
# OPTION 2
### If making many maps from sets of MIMICS parameters
## Load a set of parameters for MIMICS
# param_sets <- readRDS("MIMICS_MC_parms_for_maps.rds")
# param_sets$pID <- seq(1,nrow(param_sets),1)
## Manually select parameter set
# pest_num <- 1  #<-- enter number for desired parameter set (row #)
# pset <- param_sets[pset_num,]
###########################################
#####################################
### Setting of chosen parameters
#####################################
# Set parameter defaults
Vslope_d  = rep(0.063, 6)
Vint_d    = rep(5.47, 6)
Kslope_d  = rep(c(0.025, 0.035, 0.025),2)
Kint_d    = rep(3.19, 6)
CUE_d     = c(0.55, 0.25, 0.75, 0.35)
Tau_MULT_d = 1
Tau_MULT_d = 1
desorb_MULT_d = 1
fPHYS_MULT_d = 1
# Set parameters
Vslope = Vslope_d * pset$Vslope_x
Vint = Vint_d * pset$Vint_x
Kslope = Kslope_d * pset$Kslope_x
Kint = Kint_d * pset$Kint_x
CUE = CUE_d * pset$CUE_x
Tau_MULT = pset$Tau_x
desorb_MULT = pset$desorb_x
fPHYS_MULT = pset$fPHYS_x
###################################################
# Start up MIMICS run using parallel processing
###################################################
# Set number of cores to use
#no_cores <- availableCores() - 2
no_cores <- 5
plan(multicore, gc = TRUE, workers = no_cores)
# Run MIMICS! (track time required)
start_time <- Sys.time()
MIM_Map_data <- frc_data %>% split(1:nrow(frc_data)) %>% future_map(MIMICS1, .progress=TRUE) %>% bind_rows()
Sys.time() - start_time
# Release CPU cores
plan(sequential)
nbrOfWorkers()
# Clean up memory
gc()
#################################################
# Save map output
#################################################
#Write raw map output
saveRDS(MIM_Map_data, "MIMICS_map_data.rds")
# join to raster frac data frame
MIM_Map_data_full <- merge(frc_data, MIM_Map_data, by.x = "Site",
by.y = "Site", all.x = TRUE, all.y = FALSE)
# join to raster frac data frame
MIM_Map_data_full <- merge(frc_data, MIM_Map_data, by.x = "Site",
by.y = "Site", all.x = TRUE, all.y = FALSE)
#save full map dataset
saveRDS(MIM_Map_data_full, "MIMICS_map_data_full.rds")
# copy raster construct and meta from estGPP, refill with MIMSOC values
estSOC <- setValues(estGPP, MIM_Map_data_full$MIMSOC)
#save full map dataset
saveRDS(MIM_Map_data_full, "Mapping/MIMICS_map_data_full.rds")
#Write raw map output
saveRDS(MIM_Map_data, "Mapping/MIMICS_map_data.rds")
######################################################
# Create MIMICS forcing dataset from raster layers
######################################################
library(raster)
library(rgdal)
library(tidyverse)
#set working drive
setwd("C:/github/MIMICS_HiRes")
# Set path to raster files
raster_path <- "C:/Users/Derek/Google Drive/RCrk/GIS/MIMICS_rasters/"
# Load raster data
estGPP <- raster(paste0(raster_path,"MSAVI_estGPP.tif"))
estTSOI <- raster(paste0(raster_path,"tsoi_est2.tif"))
estCLAY <- raster(paste0(raster_path,"RCrk_estClay.tif"))
estLIGN <- raster(paste0(raster_path,"RCrk_estLigN.tif"))
#smaller test areas
# raster_path <- "C:/Users/Derek/Google Drive/RCrk/GIS/MIMICS_rasters/specs/"
# estGPP <- raster(paste0(raster_path,"MSAVI_estGPP_spc.tif"))
# estTSOI <- raster(paste0(raster_path,"tsoi_est2_spc.tif"))
# estCLAY <- raster(paste0(raster_path,"RCrk_estClay_spc.tif"))
# estLIGN <- raster(paste0(raster_path,"RCrk_estLigN_spc.tif"))
raster_n <- ncell(estGPP)
raster_frc <- data.frame(Site=seq(1,raster_n),
pGPP=as.numeric(getValues(estGPP)),
TSOI=as.numeric(getValues(estTSOI)),
CLAY=as.numeric(getValues(estCLAY)),
lig_N=as.numeric(getValues(estLIGN)))
# Remove rows if NA exists in data columns
raster_frc_nona <- na.omit(raster_frc)
raster_frc_nona$index <- seq(1,nrow(raster_frc_nona),1)
#Write output
saveRDS(raster_frc_nona, "Mapping/Map_data/MIMICS_map_forcing_data.rds")
#Write output
saveRDS(raster_frc_nona, "Mapping/Map_data/MIMICS_map_forcing_dataT.rds")
library(furrr)
library(purrr)
setwd("C:/github/MIMICS_HiRes")
# Load map data (output from MIMICS_soil_C_mapper.R)
MIM_Map_data_full <- readRDS("Mapping/Map_data/MIMICS_map_data_full.rds")
##################################################
# Load MIMICS forcing data rasters
#################################################
# Set path to raster files
raster_path <- "C:/Users/Derek/Google Drive/RCrk/GIS/MIMICS_rasters/"
# Load raster data
estGPP <- raster(paste0(raster_path,"MSAVI_estGPP.tif"))
estTSOI <- raster(paste0(raster_path,"tsoi_est2.tif"))
estCLAY <- raster(paste0(raster_path,"RCrk_estClay.tif"))
estLIGN <- raster(paste0(raster_path,"RCrk_estLigN.tif"))
### If mapping a smaller map piece for testing, set number of rows
test_rows <- 3000
estGPP <- estGPP[1:test_rows,]
# copy raster construct and meta from estGPP, refill with MIMSOC values
estSOC <- setValues(estGPP, MIM_Map_data_full$MIMSOC)
library(tidyverse)
library(furrr)
library(purrr)
library(raster)
library(rgdal)
# copy raster construct and meta from estGPP, refill with MIMSOC values
estSOC <- setValues(estGPP, MIM_Map_data_full$MIMSOC)
